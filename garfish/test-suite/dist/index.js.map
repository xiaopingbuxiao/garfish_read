{
  "version": 3,
  "sources": ["../src/index.ts", "../src/mock.ts"],
  "sourcesContent": ["export * from './mock';\n", "import fs from 'fs';\nimport path from 'path';\nimport 'isomorphic-fetch';\nimport fetchMock from 'jest-fetch-mock';\nimport { isAbsolute } from '@garfish/utils';\n\n// Unit test server\nexport function mockStaticServer({\n  baseDir,\n  filterKeywords,\n  customerHeaders = {},\n  timeConsuming,\n}: {\n  baseDir: string;\n  timeConsuming?: number;\n  filterKeywords?: Array<string>;\n  customerHeaders?: Record<string, Record<string, any>>;\n}) {\n  const match = (input: Request) => {\n    return Array.isArray(filterKeywords)\n      ? !filterKeywords.some((words) => input.url.includes(words))\n      : true;\n  };\n\n  fetchMock.enableMocks();\n  fetchMock.doMock();\n\n  fetchMock.mockIf(match, (req) => {\n    let pathname = req.url;\n    if (isAbsolute(req.url)) {\n      pathname = new URL(req.url).pathname;\n    }\n    const fullDir = path.resolve(baseDir, `./${pathname}`);\n    const { ext } = path.parse(fullDir);\n    // prettier-ignore\n    const mimeType =\n      ext === '.html'\n        ? 'text/html'\n        : ext === '.js'\n          ? 'text/javascript'\n          : ext === '.css'\n            ? 'text/css'\n            : 'text/plain';\n\n    return new Promise((resolve) => {\n      const res = {\n        url: req.url,\n        body: fs.readFileSync(fullDir, 'utf-8'),\n        headers: {\n          'Content-Type': mimeType,\n          ...(customerHeaders[pathname] || {}),\n        },\n      };\n      if (timeConsuming) {\n        setTimeout(() => resolve(res), timeConsuming);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA,gBAAe;AACf,kBAAiB;AACjB,8BAAO;AACP,6BAAsB;AACtB,mBAA2B;AAGpB,0BAA0B;AAAA,EAC/B;AAAA,EACA;AAAA,EACA,kBAAkB;AAAA,EAClB;AAAA,GAMC;AACD,QAAM,QAAQ,CAAC,UAAmB;AAChC,WAAO,MAAM,QAAQ,kBACjB,CAAC,eAAe,KAAK,CAAC,UAAU,MAAM,IAAI,SAAS,UACnD;AAAA;AAGN,iCAAU;AACV,iCAAU;AAEV,iCAAU,OAAO,OAAO,CAAC,QAAQ;AAC/B,QAAI,WAAW,IAAI;AACnB,QAAI,6BAAW,IAAI,MAAM;AACvB,iBAAW,IAAI,IAAI,IAAI,KAAK;AAAA;AAE9B,UAAM,UAAU,oBAAK,QAAQ,SAAS,KAAK;AAC3C,UAAM,EAAE,QAAQ,oBAAK,MAAM;AAE3B,UAAM,WACJ,QAAQ,UACJ,cACA,QAAQ,QACN,oBACA,QAAQ,SACN,aACA;AAEV,WAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,YAAM,MAAM;AAAA,QACV,KAAK,IAAI;AAAA,QACT,MAAM,kBAAG,aAAa,SAAS;AAAA,QAC/B,SAAS;AAAA,UACP,gBAAgB;AAAA,WACZ,gBAAgB,aAAa;AAAA;AAGrC,UAAI,eAAe;AACjB,mBAAW,MAAM,QAAQ,MAAM;AAAA,aAC1B;AACL,gBAAQ;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}

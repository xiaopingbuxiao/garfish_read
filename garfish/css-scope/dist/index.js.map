{
  "version": 3,
  "sources": ["../src/index.ts", "../src/cssParser.ts", "../src/cssStringify.ts", "../src/animationParser.ts", "../src/pluginify.ts"],
  "sourcesContent": ["export { parse } from './cssParser';\nexport { stringify } from './cssStringify';\nexport { CssScopeOptions, GarfishCssScope } from './pluginify';", "/* eslint-disable quotes */\n// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nimport { error as throwError } from '@garfish/utils';\nimport {\n  Node,\n  RuleNode,\n  HostNode,\n  PageNode,\n  DeclNode,\n  MediaNode,\n  ImportNode,\n  CharsetNode,\n  CommentNode,\n  DocumentNode,\n  FontFaceNode,\n  KeyframeNode,\n  NamespaceNode,\n  KeyframesNode,\n  StylesheetNode,\n  CustomMediaNode,\n} from './globalTypes';\n\nconst commentre = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\ninterface Point {\n  line: number;\n  column: number;\n}\n\nexport interface CssParserOptions {\n  silent?: boolean;\n  source?: string | null;\n}\n\n// 1M text takes about 150ms\nexport function parse(css: string, options: CssParserOptions = {}) {\n  let line = 1;\n  let column = 1;\n\n  // Update lineno and column based on `str`.\n  function updatePosition(str: string) {\n    const lines = str.match(/\\n/g);\n    if (lines) line += lines.length;\n    const i = str.lastIndexOf('\\n');\n    column = i > -1 ? str.length - i : column + str.length;\n  }\n\n  // Store position information for a node\n  class Position {\n    public start: Point;\n    public content = css;\n    public end = { line, column };\n    public source = options.source;\n\n    constructor(start: Point) {\n      this.start = start;\n    }\n  }\n\n  // Mark position and patch `node.position`.\n  function position() {\n    const start: Point = { line, column };\n    return function <T extends Partial<Node>>(node: T) {\n      node.position = new Position(start);\n      whitespace();\n      return node as T;\n    };\n  }\n\n  const errorsList: Array<Error> = [];\n  function error(msg: string) {\n    const source = options.source ? options.source + ':' : '';\n    const err: any = new Error(source + line + ':' + column + ': ' + msg);\n\n    err.line = line;\n    err.column = column;\n    err.reason = msg;\n    err.source = css;\n    err.filename = options.source;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throwError(err);\n    }\n  }\n\n  // Parse stylesheet.\n  function stylesheet() {\n    const rulesList = rules();\n    return {\n      type: 'stylesheet',\n      stylesheet: {\n        rules: rulesList,\n        source: options.source,\n        parsingErrors: errorsList,\n      },\n    } as unknown as StylesheetNode;\n  }\n\n  // Opening brace.\n  function open() {\n    return match(/^{\\s*/);\n  }\n\n  // Closing brace.\n  function close() {\n    return match(/^}/);\n  }\n\n  // Parse whitespace.\n  function whitespace() {\n    match(/^\\s*/);\n  }\n\n  // Parse ruleset.\n  function rules() {\n    let node;\n    const rules: Array<RuleNode> = [];\n    whitespace();\n    comments(rules);\n    while (css.length && css.charAt(0) !== '}' && (node = atrule() || rule())) {\n      if (node !== false) {\n        rules.push(node);\n        comments(rules);\n      }\n    }\n    return rules;\n  }\n\n  // Match `re` and return captures.\n  function match(re: RegExp) {\n    const m = re.exec(css);\n    if (m) {\n      const str = m[0];\n      updatePosition(str);\n      css = css.slice(str.length);\n      return m;\n    }\n  }\n\n  // Parse comments;\n  function comments<T extends Array<any>>(rules?: T) {\n    let c;\n    rules = rules || ([] as any);\n    while ((c = comment())) {\n      if (c !== false) {\n        rules!.push(c);\n      }\n    }\n    return rules as T;\n  }\n\n  // Parse comment.\n  function comment() {\n    const pos = position();\n    if ('/' !== css.charAt(0) || '*' !== css.charAt(1)) return;\n\n    let i = 2;\n    while (\n      '' !== css.charAt(i) &&\n      ('*' !== css.charAt(i) || '/' !== css.charAt(i + 1))\n    ) {\n      ++i;\n    }\n\n    i += 2;\n\n    if ('' === css.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    const str = css.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    css = css.slice(i);\n    column += 2;\n\n    return pos({\n      type: 'comment',\n      comment: str,\n    }) as CommentNode;\n  }\n\n  // Parse selector.\n  function selector() {\n    const m = match(/^([^{]+)/);\n    if (m) {\n      // @fix Remove all comments from selectors\n      // http://ostermiller.org/findcomment.html\n      return trim(m[0])\n        .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n        .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, (m) => {\n          return m.replace(/,/g, '\\u200C');\n        })\n        .split(/\\s*(?![^(]*\\)),\\s*/)\n        .map((s) => s.replace(/\\u200C/g, ','));\n    }\n  }\n\n  // Parse declaration.\n  function declaration() {\n    const pos = position();\n    // prop\n    let prop = match(/^(\\*?[-#\\/\\*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n    if (!prop) return;\n    (prop as any) = trim(prop[0]);\n    // :\n    if (!match(/^:\\s*/)) return error(\"property missing ':'\");\n    // val\n    const val = match(/^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)/);\n\n    const ret = pos({\n      type: 'declaration',\n      property: (prop as any).replace(commentre, ''),\n      value: val ? trim(val[0]).replace(commentre, '') : '',\n    });\n\n    // ;\n    match(/^[;\\s]*/);\n    return ret;\n  }\n\n  // Parse declarations.\n  function declarations() {\n    const decls: Array<DeclNode> = [];\n    if (!open()) return error(\"missing '{'\");\n    comments(decls);\n\n    // declarations\n    let decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n    if (!close()) return error(\"missing '}'\");\n    return decls;\n  }\n\n  // Parse keyframe.\n  function keyframe() {\n    let m: any;\n    const vals: Array<string> = [];\n    const pos = position();\n\n    while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n      vals.push(m[1]);\n      match(/^,\\s*/);\n    }\n\n    if (!vals.length) return;\n    return pos({\n      type: 'keyframe',\n      values: vals,\n      declarations: declarations() || [],\n    }) as unknown as KeyframeNode;\n  }\n\n  // Parse keyframes.\n  function atkeyframes() {\n    const pos = position();\n    let m = match(/^@([-\\w]+)?keyframes\\s*/);\n    if (!m) return;\n    const vendor = m[1];\n\n    // identifier\n    m = match(/^([-\\w]+)\\s*/);\n    if (!m) return error('@keyframes missing name');\n    const name = m[1];\n\n    if (!open()) return error(\"@keyframes missing '{'\");\n    let frame;\n    let frames = comments();\n    while ((frame = keyframe())) {\n      frames.push(frame);\n      frames = frames.concat(comments());\n    }\n    if (!close()) return error(\"@keyframes missing '}'\");\n\n    return pos({\n      type: 'keyframes',\n      name: name,\n      vendor: vendor,\n      keyframes: frames,\n    }) as KeyframesNode;\n  }\n\n  // Parse supports.\n  function atsupports() {\n    const pos = position();\n    const m = match(/^@supports *([^{]+)/);\n\n    if (!m) return;\n    const supports = trim(m[1]);\n\n    if (!open()) return error(\"@supports missing '{'\");\n    const style = comments().concat(rules());\n    if (!close()) return error(\"@supports missing '}'\");\n\n    return pos({\n      type: 'supports',\n      supports: supports,\n      rules: style,\n    });\n  }\n\n  // Parse host.\n  function athost() {\n    const pos = position();\n    const m = match(/^@host\\s*/);\n    if (!m) return;\n\n    if (!open()) return error(\"@host missing '{'\");\n    const style = comments().concat(rules());\n    if (!close()) return error(\"@host missing '}'\");\n\n    return pos({\n      type: 'host',\n      rules: style,\n    }) as HostNode;\n  }\n\n  // Parse media.\n  function atmedia() {\n    const pos = position();\n    const m = match(/^@media *([^{]+)/);\n\n    if (!m) return;\n    const media = trim(m[1]);\n\n    if (!open()) return error(\"@media missing '{'\");\n    const style = comments().concat(rules());\n    if (!close()) return error(\"@media missing '}'\");\n\n    return pos({\n      type: 'media',\n      media: media,\n      rules: style,\n    }) as MediaNode;\n  }\n\n  // Parse custom-media.\n  function atcustommedia() {\n    const pos = position();\n    const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n    if (!m) return;\n\n    return pos({\n      type: 'custom-media',\n      name: trim(m[1]),\n      media: trim(m[2]),\n    }) as CustomMediaNode;\n  }\n\n  // Parse paged media.\n  function atpage() {\n    const pos = position();\n    const m = match(/^@page */);\n    if (!m) return;\n\n    const sel = selector() || [];\n\n    if (!open()) return error(\"@page missing '{'\");\n    // declarations\n    let decl;\n    let decls = comments();\n\n    while ((decl = declaration())) {\n      decls.push(decl);\n      decls = decls.concat(comments());\n    }\n    if (!close()) return error(\"@page missing '}'\");\n\n    return pos({\n      type: 'page',\n      selectors: sel,\n      declarations: decls,\n    }) as PageNode;\n  }\n\n  // Parse document.\n  function atdocument() {\n    const pos = position();\n    const m = match(/^@([-\\w]+)?document *([^{]+)/);\n    if (!m) return;\n\n    const vendor = trim(m[1]);\n    const doc = trim(m[2]);\n\n    if (!open()) return error(\"@document missing '{'\");\n    const style = comments().concat(rules());\n    if (!close()) return error(\"@document missing '}'\");\n\n    return pos({\n      type: 'document',\n      document: doc,\n      vendor: vendor,\n      rules: style,\n    }) as DocumentNode;\n  }\n\n  // Parse font-face.\n  function atfontface() {\n    const pos = position();\n    const m = match(/^@font-face\\s*/);\n    if (!m) return;\n\n    if (!open()) return error(\"@font-face missing '{'\");\n    // declarations\n    let decl;\n    let decls = comments();\n    while ((decl = declaration())) {\n      decls.push(decl);\n      decls = decls.concat(comments());\n    }\n    if (!close()) return error(\"@font-face missing '}'\");\n\n    return pos({\n      type: 'font-face',\n      declarations: decls,\n    }) as FontFaceNode;\n  }\n\n  // Parse non-block at-rules\n  function compileAtrule<T>(name: Node['type']) {\n    const re = new RegExp('^@' + name + '\\\\s*([^;]+);');\n    return function () {\n      const pos = position();\n      const m = match(re);\n      if (!m) return;\n      const ret = { type: name };\n      ret[name] = m[1].trim();\n      return pos(ret) as unknown as T;\n    };\n  }\n\n  // Parse import\n  const atimport = compileAtrule<ImportNode>('import');\n  // Parse charset\n  const atcharset = compileAtrule<CharsetNode>('charset');\n  // Parse namespace\n  const atnamespace = compileAtrule<NamespaceNode>('namespace');\n\n  // Parse at rule.\n  function atrule() {\n    if (css[0] !== '@') return;\n    return (\n      atkeyframes() ||\n      atmedia() ||\n      atcustommedia() ||\n      atsupports() ||\n      atimport() ||\n      atcharset() ||\n      atnamespace() ||\n      atdocument() ||\n      atpage() ||\n      athost() ||\n      atfontface()\n    );\n  }\n\n  // Parse rule.\n  function rule() {\n    const pos = position();\n    const sel = selector();\n    if (!sel) return error('selector missing');\n    comments();\n\n    return pos({\n      type: 'rule',\n      selectors: sel,\n      declarations: declarations() || [],\n    });\n  }\n\n  return addParent(stylesheet() as any) as StylesheetNode;\n}\n\nfunction trim(str: string) {\n  return str ? str.trim() : '';\n}\n\n// Adds non-enumerable parent node reference to each node.\nfunction addParent(obj: Node, parent?: Node | null) {\n  const isNode = obj && typeof obj.type === 'string';\n  const childParent = isNode ? obj : parent;\n\n  for (const k in obj) {\n    const value = obj[k];\n    if (Array.isArray(value)) {\n      value.forEach((v) => addParent(v, childParent));\n    } else if (value && typeof value === 'object') {\n      addParent(value, childParent);\n    }\n  }\n\n  if (isNode) {\n    obj.parent = parent || null;\n  }\n  return obj;\n}\n", "import { __MockHtml__, __MockHead__, __MockBody__ } from '@garfish/utils';\nimport {\n  Node,\n  DeclNode,\n  PageNode,\n  HostNode,\n  RuleNode,\n  MediaNode,\n  ImportNode,\n  CharsetNode,\n  CommentNode,\n  SupportsNode,\n  DocumentNode,\n  FontFaceNode,\n  KeyframeNode,\n  KeyframesNode,\n  NamespaceNode,\n  StylesheetNode,\n  CustomMediaNode,\n} from './globalTypes';\nimport { processAnimation } from './animationParser';\n\nconst animationRE = /^(-\\w+-)?animation$/;\nconst animationNameRE = /^(-\\w+-)?animation-name$/;\n\nclass Compiler {\n  public level = 1;\n  public id: string;\n\n  constructor(id: string) {\n    this.id = id || '';\n  }\n\n  // \u53EF\u4EE5\u91CD\u5199\u8986\u76D6 emit\n  emit(str: string, _?: any) {\n    return str;\n  }\n\n  visit(node: Node) {\n    return this[node.type](node as any);\n  }\n\n  mapVisit(nodes: Array<Node>, delim: string) {\n    let i = 0;\n    let buf = '';\n    const len = nodes.length;\n\n    for (; i < len; i++) {\n      buf += this.visit(nodes[i]);\n      if (delim && i < len - 1) {\n        buf += this.emit(delim);\n      }\n    }\n    return buf;\n  }\n\n  addScope(selectors: Array<string>) {\n    if (!this.id) return selectors;\n\n    return selectors.map((s) => {\n      // prettier-ignore\n      s =\n        s === 'html' || s === ':root'\n          ? `[${__MockHtml__}]`\n          : s === 'body'\n            ? `[${__MockBody__}]`\n            : s === 'head'\n              ? `[${__MockHead__}]`\n              : s;\n      return `#${this.id} ${s}`;\n    });\n  }\n\n  indent(level?: number) {\n    if (typeof level === 'number') {\n      this.level += level;\n      return '';\n    }\n    return Array(this.level).join('  ');\n  }\n\n  compile(node: StylesheetNode) {\n    return this.stylesheet(node);\n  }\n\n  stylesheet(node: StylesheetNode) {\n    return this.mapVisit(node.stylesheet.rules, '\\n\\n');\n  }\n\n  comment(node: CommentNode) {\n    return this.emit(`${this.indent()}/*${node.comment}*/`, node.position);\n  }\n\n  import(node: ImportNode) {\n    return this.emit(`@import ${node.import};`, node.position);\n  }\n\n  charset(node: CharsetNode) {\n    return this.emit(`@charset ${node.charset};`, node.position);\n  }\n\n  namespace(node: NamespaceNode) {\n    return this.emit(`@namespace ${node.namespace};`, node.position);\n  }\n\n  media(node: MediaNode) {\n    return (\n      this.emit(`@media ${node.media}`, node.position) +\n      this.emit(` {\\n${this.indent(1)}`) +\n      this.mapVisit(node.rules, '\\n\\n') +\n      this.emit(`${this.indent(-1)}\\n}`)\n    );\n  }\n\n  document(node: DocumentNode) {\n    const doc = `@${node.vendor || ''}document ${node.document}`;\n    return (\n      this.emit(doc, node.position) +\n      this.emit(`  {\\n${this.indent(1)}`) +\n      this.mapVisit(node.rules, '\\n\\n') +\n      this.emit(`${this.indent(-1)}\\n}`)\n    );\n  }\n\n  supports(node: SupportsNode) {\n    return (\n      this.emit(`@supports ${node.supports}`, node.position) +\n      this.emit(` {\\n${this.indent(1)}`) +\n      this.mapVisit(node.rules, '\\n\\n') +\n      this.emit(`${this.indent(-1)}\\n}`)\n    );\n  }\n\n  keyframes(node: KeyframesNode) {\n    const name = this.id ? `${this.id}-${node.name}` : node.name;\n    return (\n      this.emit(`@${node.vendor || ''}keyframes ${name}`, node.position) +\n      this.emit(` {\\n${this.indent(1)}`) +\n      this.mapVisit(node.keyframes, '\\n') +\n      this.emit(`${this.indent(-1)}}`)\n    );\n  }\n\n  keyframe(node: KeyframeNode) {\n    const decls = node.declarations;\n    return (\n      this.emit(this.indent()) +\n      this.emit(node.values.join(', '), node.position) +\n      this.emit(` {\\n${this.indent(1)}`) +\n      this.mapVisit(decls, '\\n') +\n      this.emit(`${this.indent(-1)}\\n${this.indent()}}\\n`)\n    );\n  }\n\n  page(node: PageNode) {\n    // prettier-ignore\n    const sel = node.selectors.length\n      ? this.addScope(node.selectors).join(', ') + ' '\n      : '';\n\n    return (\n      this.emit(`@page ${sel}`, node.position) +\n      this.emit('{\\n') +\n      this.emit(this.indent(1)) +\n      this.mapVisit(node.declarations, '\\n') +\n      this.emit(this.indent(-1)) +\n      this.emit('\\n}')\n    );\n  }\n\n  host(node: HostNode) {\n    return (\n      this.emit('@host', node.position) +\n      this.emit(` {\\n${this.indent(1)}`) +\n      this.mapVisit(node.rules, '\\n\\n') +\n      this.emit(`${this.indent(-1)}\\n}`)\n    );\n  }\n\n  rule(node: RuleNode) {\n    const indent = this.indent();\n    const decls = node.declarations;\n    if (!decls.length) return '';\n\n    return (\n      this.emit(\n        this.addScope(node.selectors)\n          .map((s) => indent + s)\n          .join(',\\n'),\n        node.position,\n      ) +\n      this.emit(' {\\n') +\n      this.emit(this.indent(1)) +\n      this.mapVisit(decls, '\\n') +\n      this.emit(this.indent(-1)) +\n      this.emit(`\\n${this.indent()}}`)\n    );\n  }\n\n  declaration(node: DeclNode) {\n    // eslint-disable-next-line prefer-const\n    let { value, property, position } = node;\n\n    if (this.id) {\n      if (animationRE.test(property)) {\n        value = processAnimation(value, this.id);\n      } else if (animationNameRE.test(property)) {\n        value = value\n          .split(',')\n          .map((v) => (v === 'none' ? v : `${v.trim()}-${this.id}`))\n          .join(',');\n      }\n    }\n    return (\n      this.emit(this.indent()) +\n      this.emit(`${property}: ${value}`, position) +\n      this.emit(';')\n    );\n  }\n\n  'font-face'(node: FontFaceNode) {\n    return (\n      this.emit('@font-face ', node.position) +\n      this.emit('{\\n') +\n      this.emit(this.indent(1)) +\n      this.mapVisit(node.declarations, '\\n') +\n      this.emit(this.indent(-1)) +\n      this.emit('\\n}')\n    );\n  }\n\n  'custom-media'(node: CustomMediaNode) {\n    return this.emit(\n      `@custom-media ${node.name} ${node.media};`,\n      node.position,\n    );\n  }\n}\n\nexport function stringify(node: StylesheetNode, id: string) {\n  const compiler = new Compiler(id);\n  return compiler.compile(node);\n}\n", "// https://drafts.csswg.org/css-animations-1/#typedef-single-animation\n// https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation#%E8%AF%AD%E6%B3%95\n\n// time: s | ms\nconst timeReg = /^[-\\d\\.]+(s|ms)$/;\nfunction isTime(p: string) {\n  return timeReg.test(p);\n}\n\n// single-animation-iteration-count: infinite | <number>\nconst numberReg = /^[-\\d\\.]+$/;\nfunction isIterationCount(p: string) {\n  return p === 'infinite' || numberReg.test(p);\n}\n\n// single-animation-play-state: running | paused\nfunction isPlayState(p: string) {\n  return p === 'running' || p === 'paused';\n}\n\n// time-function: ease | ease-in | ease-out | ease-in-out | linear |  step-start | step-end | cubic-bezier() | steps()\nfunction isTimeFunction(p: string | Props) {\n  if (Array.isArray(p)) return true;\n  switch (p) {\n    case 'ease':\n    case 'ease-in':\n    case 'ease-out':\n    case 'ease-in-out':\n    case 'linear':\n    case 'step-start':\n    case 'step-end':\n    case 'cubic-bezier':\n    case 'steps':\n      return true;\n    default:\n      return false;\n  }\n}\n\n// single-animation-direction: normal | reverse | alternate | alternate-reverse\nfunction isDirection(p: string) {\n  switch (p) {\n    case 'normal':\n    case 'reverse':\n    case 'alternate':\n    case 'alternate-reverse':\n      return true;\n    default:\n      return false;\n  }\n}\n\n// single-animation-fill-mode: none | forwards | backwards | both\nfunction isFillMode(p: string) {\n  switch (p) {\n    case 'none':\n    case 'forwards':\n    case 'backwards':\n    case 'both':\n      return true;\n    default:\n      return false;\n  }\n}\n\n// https://developer.mozilla.org/zh-CN/docs/Web/CSS/custom-ident#%E8%AF%AD%E6%B3%95\n// With parser, only need to filter keywords and special symbols in token\nconst symbols = /[,'\"\\(\\)!;]/;\nfunction isLegalName(p: string) {\n  if (symbols.test(p)) return false;\n  switch (p) {\n    case 'unset':\n    case 'initial':\n    case 'inherit':\n    case 'none':\n      return false;\n    default:\n      return true;\n  }\n}\n\n// none | keyframes-name: <custom-ident> | <string>\nfunction isName(p: string) {\n  if (\n    !(\n      isTime(p) ||\n      isPlayState(p) ||\n      isIterationCount(p) ||\n      isFillMode(p) ||\n      isDirection(p) ||\n      isTimeFunction(p)\n    )\n  ) {\n    return isLegalName(p);\n  }\n  return false;\n}\n\nfunction tokenizer(input: string) {\n  let buf = '';\n  const tokens: Array<string> = [];\n  const push = () => {\n    buf && tokens.push(buf);\n    buf = '';\n  };\n\n  for (const char of input) {\n    if (char === ',' || char === ')' || char === ';') {\n      push();\n      buf += char;\n      push();\n    } else if (char === '(') {\n      push();\n      if (tokens[tokens.length - 1] === ' ') {\n        if ((typeof process !== \"undefined\" && process.env && process.env.NODE_ENV ? (process.env.NODE_ENV !== \"production\") : false) && !false) {\n          console.error(\n            `[Garfish Css scope]: Invalid property value: \"${input}\"`,\n          );\n        }\n        return false;\n      }\n      buf += char;\n      push();\n    } else if (char === ' ') {\n      push();\n      if (tokens[tokens.length - 1] !== ' ') {\n        tokens.push(' ');\n      }\n    } else {\n      buf += char;\n    }\n  }\n  push();\n  return tokens;\n}\n\nfunction parse(tokens: Array<string>): Array<Props> {\n  let mode = 1; // 1 | 2 | 3\n  let scope: Array<any> = [];\n  let stash = false;\n  const parent = [];\n  scope[0] = parent;\n\n  const up = () => {\n    scope[0].push(scope);\n    scope = scope[0];\n  };\n\n  const down = () => {\n    const ns: Array<any> = [];\n    ns[0] = scope;\n    scope = ns;\n  };\n\n  const parallel = () => {\n    scope[0].push(scope);\n    scope = [];\n    scope[0] = parent;\n  };\n\n  const toThreeMode = (t: string) => {\n    mode = 3;\n    down();\n    scope.push(t);\n  };\n\n  for (let i = 0; i < tokens.length; i++) {\n    const t = tokens[i];\n    if (mode === 1) {\n      if (t === ',') {\n        mode = 2;\n        stash = false;\n        scope.push(t);\n      } else if (t === '(') {\n        toThreeMode(t);\n      } else if (t === ' ') {\n        stash = true;\n      } else {\n        stash && parallel();\n        stash = false;\n        scope.push(t);\n      }\n    } else if (mode === 2) {\n      if (t === '(') {\n        toThreeMode(t);\n      } else if (t === ' ') {\n        if (tokens[i - 1] !== ',') {\n          mode = 1;\n          stash = true;\n        }\n      } else {\n        scope.push(t);\n      }\n    } else if (mode === 3) {\n      if (t === ')') {\n        mode = 2;\n        scope.push(t);\n        up();\n      } else {\n        scope.push(t);\n      }\n    }\n  }\n  parallel();\n  return parent;\n}\n\ntype Props = Array<string | Props>;\nfunction stringify(tree: Array<Props>, prefix: string) {\n  let output = '';\n  const splice = (p) => (isName(p) ? `${p}-${prefix}` : p);\n\n  const child = (ps: Array<string>) => {\n    let buf = '';\n    for (let i = 1; i < ps.length; i++) {\n      buf += ps[i];\n    }\n    return buf;\n  };\n\n  tree.forEach((ps) => {\n    if (ps.length === 2) {\n      // prettier-ignore\n      output += (\n        Array.isArray(ps[1])\n          ? child(ps[1] as Array<string>)\n          : splice(ps[1])\n      ) + ' ';\n    } else {\n      for (let i = 1; i < ps.length; i++) {\n        const next = ps[i + 1];\n        const nextIsArray = Array.isArray(next);\n        // prettier-ignore\n        let cur = Array.isArray(ps[i])\n          ? child(ps[i] as Array<string>)\n          : nextIsArray\n            ? ps[i]\n            : splice(ps[i] as string);\n\n        if (next === ',' || next === ';') {\n          // No add spaces\n        } else if (nextIsArray) {\n          const fillUp = ps[i + 2] === ',' ? '' : ' ';\n          cur += `${child(next as Array<string>)}${fillUp}`;\n          i++;\n        } else {\n          cur += ' ';\n        }\n        output += cur;\n      }\n    }\n  });\n  return output.trim();\n}\n\nconst codeCache = new Map<string, string>();\nconst treeCache = new Map<string, Array<Props>>();\n\nexport function processAnimation(input: string, prefix: string) {\n  if (!input || !prefix) return input;\n  const etag = `${prefix}-${input}`;\n  if (codeCache.has(etag)) {\n    return codeCache.get(etag)!;\n  }\n\n  let tree = treeCache.get(input);\n  if (!tree) {\n    const tokens = tokenizer(input);\n    // If the syntax is incorrect, just return to the original text\n    if (tokens === false) return input;\n    tree = parse(tokens);\n    treeCache.set(input, tree);\n  }\n\n  const newCode = stringify(tree, prefix);\n  codeCache.set(etag, newCode);\n  return newCode;\n}\n", "import { md5 } from 'super-fast-md5';\nimport type { interfaces } from '@garfish/core';\nimport type { Loader, StyleManager } from '@garfish/loader';\nimport {\n  warn,\n  findTarget,\n  supportWasm,\n  idleCallback,\n  __MockBody__,\n} from '@garfish/utils';\nimport { parse } from './cssParser';\nimport { stringify } from './cssStringify';\nimport type { StylesheetNode } from './globalTypes';\n\nexport { parse } from './cssParser';\nexport { stringify } from './cssStringify';\n\nexport interface CssScopeOptions {\n  fixBodyGetter?: boolean;\n  excludes?: Array<string> | ((name: string) => boolean);\n}\n\nexport function GarfishCssScope(options: CssScopeOptions = {}) {\n  const pluginName = 'css-scope';\n  const protoCache = new Set<StyleManager>();\n  const astCache = new Map<string, StylesheetNode>();\n\n  const disable = (appName?: string) => {\n    const { excludes } = options;\n    if (!appName) return true;\n    if (Array.isArray(excludes)) return excludes.includes(appName);\n    if (typeof excludes === 'function') return excludes(appName);\n    return false;\n  };\n\n  const processPreloadManager = (loader: Loader) => {\n    loader.hooks.usePlugin({\n      name: pluginName,\n\n      loaded({ value, result }) {\n        if (value.fileType === 'css' && !disable(value.scope)) {\n          const { styleCode } = value.resourceManager as StyleManager;\n          idleCallback(() => {\n            const hash = md5(styleCode);\n            if (!astCache.has(hash)) {\n              const astNode = parse(styleCode, { source: value.url });\n              astCache.set(hash, astNode);\n            }\n          });\n        }\n        return { value, result };\n      },\n    });\n  };\n\n  return function (Garfish: interfaces.Garfish): interfaces.Plugin {\n    const compiledCache = new Set<string>();\n\n    return {\n      name: pluginName,\n      version: '1.12.0',\n\n      beforeBootstrap() {\n        if (!supportWasm) return;\n        // When preloading, parse out ast in advance\n        processPreloadManager(Garfish.loader);\n\n        // rewrite transform method\n        const proto = Garfish.loader.StyleManager.prototype;\n        const originTransform = proto.transformCode;\n        if (protoCache.has(proto)) return;\n        protoCache.add(proto);\n\n        proto.transformCode = function (code: string) {\n          const { appName, rootElId } = this.scopeData || {};\n          if (\n            !code ||\n            !rootElId ||\n            disable(appName) ||\n            compiledCache.has(code)\n          ) {\n            return originTransform.call(this, code);\n          }\n\n          const hash = md5(code);\n          let astNode = astCache.get(hash);\n          if (!astNode) {\n            astNode = parse(code, { source: this.url });\n            astCache.set(hash, astNode);\n          }\n          // The `rootElId` is random, it makes no sense to cache the compiled code\n          const newCode = stringify(astNode, rootElId);\n          compiledCache.add(newCode);\n          return originTransform.call(this, newCode);\n        };\n      },\n\n      beforeLoad(appInfo) {\n        if (!supportWasm) {\n          warn('\"css-scope\" plugin requires webAssembly support');\n          return;\n        }\n        const { name, sandbox } = appInfo;\n        if (!disable(name)) {\n          if (\n            sandbox &&\n            (sandbox === false || sandbox.open === false || sandbox.snapshot)\n          ) {\n            warn(\n              `Child app \"${name}\" does not open the vm sandbox, ` +\n                'cannot use \"css-scope\" plugin',\n            );\n          }\n        }\n      },\n\n      afterLoad(appInfo, app) {\n        // @ts-ignore\n        if (options.fixBodyGetter && !disable(appInfo.name) && app?.vmSandbox) {\n          // @ts-ignore\n          app.vmSandbox.hooks.usePlugin({\n            name: pluginName,\n            version: '1.12.0',\n            documentGetter(data) {\n              if (data.propName === 'body' && data.rootNode) {\n                data.customValue = findTarget(data.rootNode, [\n                  'body',\n                  `div[${__MockBody__}]`,\n                ]);\n              }\n              return data;\n            },\n          });\n        }\n      },\n    };\n  };\n}\n"],
  "mappings": "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",
  "names": []
}

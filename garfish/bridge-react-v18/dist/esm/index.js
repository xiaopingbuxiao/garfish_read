var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/reactBridge.ts
import * as React from "react";
import { createRoot, hydrateRoot } from "react-dom/client";
import { warn } from "@garfish/utils";
var defaultOpts = {
  rootComponent: void 0,
  loadRootComponent: void 0,
  renderType: void 0,
  errorBoundary: void 0,
  el: void 0,
  canUpdate: true,
  suppressComponentDidCatchWarning: false,
  domElements: {},
  renderResults: {},
  updateResolves: {}
};
function reactBridge(userOpts) {
  if (typeof userOpts !== "object") {
    throw new Error("garfish-react-bridge requires a configuration object");
  }
  const opts = __spreadValues(__spreadValues({}, defaultOpts), userOpts);
  opts.React = opts.React || React;
  opts.createRoot = opts.createRoot || createRoot;
  opts.hydrateRoot = opts.hydrateRoot || hydrateRoot;
  if (!opts.rootComponent && !opts.loadRootComponent) {
    throw new Error("garfish-react-bridge must be passed opts.rootComponent or opts.loadRootComponent");
  }
  if (opts.errorBoundary && typeof opts.errorBoundary !== "function") {
    throw Error("The errorBoundary opt for garfish-react-bridge must either be omitted or be a function that returns React elements");
  }
  if (!atLeastReact18(opts.React)) {
    throw Error("Please make sure than the react version is higher than or equal to v18.");
  }
  const providerLifeCycle = {
    render: (appInfo) => mount.call(this, opts, appInfo),
    destroy: (appInfo) => unmount.call(this, opts, appInfo)
  };
  const provider = async function(appInfo, props) {
    await bootstrap.call(this, opts, appInfo, props);
    return providerLifeCycle;
  };
  if (window.__GARFISH__ && typeof __GARFISH_EXPORTS__ === "object" && __GARFISH_EXPORTS__) {
    __GARFISH_EXPORTS__.provider = provider;
  }
  return provider;
}
function bootstrap(opts, appInfo, props) {
  if (opts.loadRootComponent) {
    return opts.loadRootComponent(__spreadProps(__spreadValues({}, appInfo), {
      props
    })).then((resolvedComponent) => {
      opts.rootComponent = resolvedComponent;
    });
  } else {
    return Promise.resolve();
  }
}
function mount(opts, appInfo) {
  if (!opts.suppressComponentDidCatchWarning && atLeastReact18(opts.React) && !opts.errorBoundary) {
    if (!opts.rootComponent.prototype) {
      warn(`garfish-react-bridge: ${appInfo.appName}'s rootComponent does not implement an error boundary.  If using a functional component, consider providing an opts.errorBoundary to reactBridge(opts).`);
    } else if (!opts.rootComponent.prototype.componentDidCatch) {
      warn(`garfish-react-bridge: ${appInfo.appName}'s rootComponent should implement componentDidCatch to avoid accidentally unmounting the entire garfish application.`);
    }
  }
  const elementToRender = getElementToRender(opts, appInfo);
  const domElement = chooseDomElementGetter(opts, appInfo);
  const renderResult = callCreateRoot({
    elementToRender,
    domElement,
    opts
  });
  if (opts.domElements) {
    opts.domElements[appInfo.appName] = domElement;
  }
  if (opts.renderResults) {
    opts.renderResults[appInfo.appName] = renderResult;
  }
}
function unmount(opts, appInfo) {
  if (opts.renderResults) {
    const root = opts.renderResults[appInfo.appName];
    root.unmount();
    opts.domElements && delete opts.domElements[appInfo.appName];
    delete opts.renderResults[appInfo.appName];
  }
}
function atLeastReact18(React2) {
  if (React2 && typeof React2.version === "string" && React2.version.indexOf(".") >= 0) {
    const majorVersionString = React2.version.split(".")[0];
    try {
      return Number(majorVersionString) >= 18;
    } catch (err) {
      return false;
    }
  } else {
    return false;
  }
}
function callCreateRoot({ opts, elementToRender, domElement }) {
  const renderType = typeof opts.renderType === "function" ? opts.renderType() : opts.renderType;
  let root;
  if (renderType === "hydrate") {
    root = opts.hydrateRoot(elementToRender, domElement);
    root.render(elementToRender);
  } else {
    root = opts.createRoot(domElement);
    root.render(elementToRender);
  }
  return root;
}
function getElementToRender(opts, appInfo) {
  var _a, _b;
  const rootComponentElement = (_a = opts.React) == null ? void 0 : _a.createElement(opts.rootComponent, appInfo);
  let elementToRender = rootComponentElement;
  if (opts.errorBoundary) {
    elementToRender = (_b = opts.React) == null ? void 0 : _b.createElement(createErrorBoundary(opts), appInfo, elementToRender);
  }
  return elementToRender;
}
function createErrorBoundary(opts) {
  function GarfishSubAppReactErrorBoundary(appInfo) {
    var _a;
    (_a = opts.React) == null ? void 0 : _a.Component.apply(this, arguments);
    this.state = {
      caughtError: null,
      caughtErrorInfo: null
    };
    GarfishSubAppReactErrorBoundary.displayName = `ReactBridgeReactErrorBoundary(${appInfo.appName})`;
  }
  GarfishSubAppReactErrorBoundary.prototype = opts.React && Object.create(opts.React.Component.prototype);
  GarfishSubAppReactErrorBoundary.prototype.render = function() {
    if (this.state.caughtError) {
      const errorBoundary = opts.errorBoundary;
      return errorBoundary && errorBoundary(this.state.caughtError, this.props);
    } else {
      return this.props.children;
    }
  };
  GarfishSubAppReactErrorBoundary.prototype.componentDidCatch = function(err, info) {
    this.setState({
      caughtError: err,
      caughtErrorInfo: info
    });
  };
  return GarfishSubAppReactErrorBoundary;
}
function chooseDomElementGetter(opts, appInfo) {
  const { dom: container } = appInfo;
  let el;
  if (typeof opts.el === "string") {
    el = container.querySelector(opts.el);
  } else {
    el = container;
  }
  if (!(el instanceof HTMLElement)) {
    throw Error(`react bridge's dom-element-getter-helpers: el is an invalid dom element for application'${appInfo.appName}'. Expected HTMLElement, received ${typeof el}`);
  }
  return el;
}
export {
  reactBridge
};
//# sourceMappingURL=data:application/json;base64,

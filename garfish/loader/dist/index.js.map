{
  "version": 3,
  "sources": ["../src/index.ts", "../src/managers/style.ts", "../src/managers/module.ts", "../src/managers/template.ts", "../src/managers/javascript.ts", "../src/utils.ts", "../src/appCache.ts"],
  "sourcesContent": ["import {\n  SyncHook,\n  SyncWaterfallHook,\n  PluginSystem,\n  AsyncHook,\n} from '@garfish/hooks';\nimport {\n  error,\n  __LOADER_FLAG__,\n  isJsType,\n  isCssType,\n  isHtmlType,\n  parseContentType,\n} from '@garfish/utils';\nimport { StyleManager } from './managers/style';\nimport { ModuleManager } from './managers/module';\nimport { TemplateManager } from './managers/template';\nimport { JavaScriptManager } from './managers/javascript';\nimport { getRequest, copyResult, mergeConfig } from './utils';\nimport { FileTypes, cachedDataSet, AppCacheContainer } from './appCache';\n\n// Export types and manager constructor\nexport * from './managers/style';\nexport * from './managers/module';\nexport * from './managers/template';\nexport * from './managers/javascript';\n\nexport type Manager =\n  | StyleManager\n  | ModuleManager\n  | TemplateManager\n  | JavaScriptManager;\n\nexport interface LoaderOptions {\n  /**\n   * The unit is byte\n   */\n  maxSize?: number;\n}\n\nexport interface CacheValue<T extends Manager> {\n  url: string;\n  code: string;\n  size: number;\n  scope: string;\n  fileType: FileTypes | '';\n  resourceManager: T | null;\n}\n\nexport interface LoadedHookArgs<T extends Manager> {\n  result: Response;\n  value: CacheValue<T>;\n}\n\nexport enum CrossOriginCredentials {\n  anonymous = 'same-origin',\n  'use-credentials' = 'include',\n}\n\ntype LifeCycle = Loader['hooks']['lifecycle'];\n\nexport type LoaderLifecycle = Partial<{\n  [k in keyof LifeCycle]: Parameters<LifeCycle[k]['on']>[0];\n}>;\n\nexport interface LoaderPlugin extends LoaderLifecycle {\n  name: string;\n  version?: string;\n}\n\nexport class Loader {\n  public personalId = __LOADER_FLAG__;\n  public StyleManager = StyleManager;\n  public ModuleManager = ModuleManager;\n  public TemplateManager = TemplateManager;\n  public JavaScriptManager = JavaScriptManager;\n  /** @deprecated */\n  public requestConfig: RequestInit | ((url: string) => RequestInit);\n\n  public hooks = new PluginSystem({\n    error: new SyncHook<[Error, { scope: string }], void>(),\n    loaded: new SyncWaterfallHook<LoadedHookArgs<Manager>>('loaded'),\n    clear: new SyncWaterfallHook<{\n      scope: string;\n      fileType?: FileTypes;\n    }>('clear'),\n    beforeLoad: new SyncWaterfallHook<{\n      url: string;\n      scope: string;\n      requestConfig: ResponseInit;\n    }>('beforeLoad'),\n    fetch: new AsyncHook<[string, RequestInit], Response | void | false>(\n      'fetch',\n    ),\n  });\n\n  private options: LoaderOptions;\n  private loadingList: Record<string, null | Promise<CacheValue<any>>>;\n  private cacheStore: { [name: string]: AppCacheContainer };\n\n  constructor(options?: LoaderOptions) {\n    this.options = options || {};\n    this.loadingList = Object.create(null);\n    this.cacheStore = Object.create(null);\n  }\n\n  setOptions(options: Partial<LoaderOptions>) {\n    this.options = { ...this.options, ...options };\n  }\n\n  clear(scope: string, fileType?: FileTypes) {\n    const appCacheContainer = this.cacheStore[scope];\n    if (appCacheContainer) {\n      appCacheContainer.clear(fileType);\n      this.hooks.lifecycle.clear.emit({ scope, fileType });\n    }\n  }\n\n  clearAll(fileType?: FileTypes) {\n    for (const scope in this.cacheStore) {\n      this.clear(scope, fileType);\n    }\n  }\n\n  usePlugin(options: LoaderPlugin) {\n    this.hooks.usePlugin(options);\n  }\n\n  setLifeCycle(lifeCycle: Partial<LoaderLifecycle>) {\n    this.hooks.usePlugin({\n      name: 'loader-lifecycle',\n      ...lifeCycle,\n    });\n  }\n\n  loadModule(url: string) {\n    return this.load<ModuleManager>({\n      scope: 'modules',\n      url,\n      isRemoteModule: true,\n    });\n  }\n\n  // Unable to know the final data type, so through \"generics\"\n  async load<T extends Manager>({\n    scope,\n    url,\n    isRemoteModule = false,\n    crossOrigin = 'anonymous',\n    defaultContentType = '',\n  }: {\n    scope: string;\n    url: string;\n    isRemoteModule?: boolean;\n    crossOrigin?: NonNullable<HTMLScriptElement['crossOrigin']>;\n    defaultContentType?: string;\n  }): Promise<LoadedHookArgs<T>['value']> {\n    const { options, loadingList, cacheStore } = this;\n\n    const res = loadingList[url];\n    if (res) {\n      return res;\n    }\n\n    let appCacheContainer = cacheStore[scope];\n    if (!appCacheContainer) {\n      appCacheContainer = cacheStore[scope] = new AppCacheContainer(\n        options.maxSize,\n      );\n    }\n\n    if (appCacheContainer.has(url)) {\n      return Promise.resolve(copyResult(appCacheContainer.get(url)));\n    } else {\n      // If other containers have cache\n      for (const key in cacheStore) {\n        const container = cacheStore[key];\n        if (container !== appCacheContainer) {\n          if (container.has(url)) {\n            const result = container.get(url);\n            cachedDataSet.add(result);\n            appCacheContainer.set(url, result, result.fileType);\n            return Promise.resolve(copyResult(result));\n          }\n        }\n      }\n    }\n\n    const requestConfig = mergeConfig(this, url);\n    // Tells browsers to include credentials in both same- and cross-origin requests, and always use any credentials sent back in responses.\n    requestConfig.credentials = CrossOriginCredentials[crossOrigin];\n    const resOpts = this.hooks.lifecycle.beforeLoad.emit({\n      url,\n      scope,\n      requestConfig,\n    });\n\n    const request = getRequest(this.hooks.lifecycle.fetch);\n    const loadRes = request(resOpts.url, resOpts.requestConfig)\n      .then(({ code, size, result, type }) => {\n        let managerCtor,\n          fileType: FileTypes | '' = '';\n\n        if (isRemoteModule) {\n          fileType = FileTypes.module;\n          managerCtor = ModuleManager;\n        } else if (\n          isHtmlType({ type, src: result.url }) ||\n          isHtmlType({\n            type: defaultContentType,\n          })\n        ) {\n          fileType = FileTypes.template;\n          managerCtor = TemplateManager;\n        } else if (\n          isJsType({ type: defaultContentType }) ||\n          isJsType({ type, src: result.url })\n        ) {\n          fileType = FileTypes.js;\n          managerCtor = JavaScriptManager;\n        } else if (\n          isCssType({ src: result.url, type }) ||\n          isCssType({\n            type: defaultContentType,\n          })\n        ) {\n          fileType = FileTypes.css;\n          managerCtor = StyleManager;\n        }\n\n        // Use result.url, resources may be redirected\n        const resourceManager: Manager | null = managerCtor\n          ? new managerCtor(code, result.url)\n          : null;\n\n        // The results will be cached this time.\n        // So, you can transform the request result.\n        const data = this.hooks.lifecycle.loaded.emit({\n          result,\n          value: {\n            url,\n            scope,\n            resourceManager,\n            fileType: fileType || '',\n            // For performance reasons, take an approximation\n            size: size || code.length,\n            code: resourceManager ? '' : code,\n          },\n        });\n\n        fileType && appCacheContainer.set(url, data.value, fileType);\n        return copyResult(data.value as any);\n      })\n      .catch((e) => {\n        (typeof process !== \"undefined\" && process.env && process.env.NODE_ENV ? (process.env.NODE_ENV !== \"production\") : false) && error(e);\n        this.hooks.lifecycle.error.emit(e, { scope });\n        throw e; // Let the upper application catch the error\n      })\n      .finally(() => {\n        loadingList[url] = null;\n      });\n\n    loadingList[url] = loadRes;\n    return loadRes;\n  }\n}\n", "import { Node, isAbsolute, transformUrl } from '@garfish/utils';\n\n// Match url in css\nconst MATCH_CSS_URL = /url\\(\\s*(['\"])?(.*?)\\1\\s*\\)/g;\nconst MATCH_CHARSET_URL = /@charset\\s+(['\"])(.*?)\\1\\s*;?/g;\nconst MATCH_IMPORT_URL = /@import\\s+(['\"])(.*?)\\1/g;\n\ninterface ScopeData {\n  appName: string;\n  rootElId: string;\n}\n\nexport class StyleManager {\n  public styleCode: string;\n  public url: string | null;\n  public scopeData: ScopeData | null;\n\n  private depsStack = new Set();\n\n  constructor(styleCode: string, url?: string) {\n    this.scopeData = null;\n    this.url = url || null;\n    this.styleCode = styleCode;\n  }\n\n  correctPath(baseUrl?: string) {\n    const { url, styleCode } = this;\n    if (!baseUrl) baseUrl = url as any;\n    if (baseUrl && typeof styleCode === 'string') {\n      // The relative path is converted to an absolute path according to the path of the css file\n      this.styleCode = styleCode\n        .replace(MATCH_CHARSET_URL, '')\n        .replace(MATCH_IMPORT_URL, function (k0, k1, k2) {\n          return k2 ? `@import url(${k1}${k2}${k1})` : k0;\n        })\n        .replace(MATCH_CSS_URL, (k0, k1, k2) => {\n          if (isAbsolute(k2)) return k0;\n          return `url(\"${baseUrl ? transformUrl(baseUrl, k2) : k2}\")`;\n        });\n    }\n  }\n\n  // Provided to plugins to override this method\n  transformCode(code: string) {\n    return code;\n  }\n\n  setDep(node: Node) {\n    this.depsStack.add(node);\n  }\n\n  setScope(data: ScopeData) {\n    this.scopeData = data;\n  }\n\n  isSameOrigin(node: Node) {\n    return this.depsStack.has(node);\n  }\n\n  renderAsStyleElement(extraCode = '') {\n    const node = document.createElement('style');\n    // prettier-ignore\n    const code = extraCode + (\n      this.styleCode\n        ? this.styleCode\n        : '/**empty style**/'\n    );\n    node.setAttribute('type', 'text/css');\n    node.textContent = this.transformCode(code);\n    return node;\n  }\n\n  clone() {\n    // @ts-ignore\n    const cloned = new this.constructor();\n    cloned.url = this.url;\n    cloned.styleCode = this.styleCode;\n    cloned.scopeData = this.scopeData;\n    cloned.depsStack = new Set(this.depsStack);\n    return cloned;\n  }\n}\n", "export class ModuleManager {\n  public moduleCode: string;\n  public url: string | null;\n  public originUrl?: string;\n  public alias: string | null;\n\n  constructor(moduleCode: string, url?: string) {\n    this.alias = null;\n    this.url = url || null;\n    this.moduleCode = moduleCode;\n  }\n\n  setAlias(name: string) {\n    if (name && typeof name === 'string') {\n      this.alias = name;\n    }\n  }\n\n  clone() {\n    // @ts-ignore\n    const cloned = new this.constructor();\n    cloned.url = this.url;\n    cloned.alias = this.alias;\n    cloned.moduleCode = this.moduleCode;\n    return cloned;\n  }\n}\n", "import {\n  Node,\n  Text,\n  DOMApis,\n  deepMerge,\n  transformUrl,\n  templateParse,\n} from '@garfish/utils';\n\ntype Renderer = Record<string, (node: Node) => null | Element | Comment>;\n\nexport class TemplateManager {\n  public url: string | undefined;\n  public DOMApis = new DOMApis();\n  public astTree: Array<Node> = [];\n  private pretreatmentStore: Record<string, Node[]> = {};\n\n  constructor(template: string, url?: string) {\n    // The url is only base url, it may also be a js resource address.\n    this.url = url;\n    if (template) {\n      const [astTree, collectionEls] = templateParse(template, [\n        'meta',\n        'link',\n        'style',\n        'script',\n      ]);\n      this.astTree = astTree;\n      this.pretreatmentStore = collectionEls;\n    }\n  }\n\n  getNodesByTagName<T>(...tags: Array<keyof T>) {\n    let counter = 0;\n    const collection: Record<keyof T, Array<Node>> = {} as any;\n\n    for (const tag of tags as string[]) {\n      if (this.pretreatmentStore[tag]) {\n        counter++;\n        collection[tag] = this.pretreatmentStore[tag];\n      } else {\n        collection[tag] = [];\n      }\n    }\n\n    if (counter !== tags.length) {\n      const traverse = (node: Node | Text) => {\n        if (node.type !== 'element') return;\n        if (\n          tags.indexOf(node.tagName as any) > -1 &&\n          !this.pretreatmentStore[node.tagName]\n        ) {\n          collection[node.tagName].push(node);\n        }\n        for (const child of node.children) traverse(child);\n      };\n      for (const node of this.astTree) traverse(node);\n    }\n    return collection;\n  }\n\n  // Render dom tree\n  createElements(renderer: Renderer, parent: Element) {\n    const elements: Array<Element> = [];\n    const traverse = (node: Node | Text, parentEl?: Element) => {\n      let el: any;\n      if (this.DOMApis.isCommentNode(node)) {\n        // Filter comment node\n      } else if (this.DOMApis.isText(node)) {\n        el = this.DOMApis.createTextNode(node);\n        parentEl && parentEl.appendChild(el);\n      } else if (this.DOMApis.isNode(node)) {\n        const { tagName, children } = node as Node;\n        if (renderer[tagName]) {\n          el = renderer[tagName](node as Node);\n        } else {\n          el = this.DOMApis.createElement(node as Node);\n        }\n        if (parentEl && el) parentEl.appendChild(el);\n\n        if (el) {\n          const { nodeType, _ignoreChildNodes } = el;\n          // Filter \"comment\" and \"document\" node\n          if (!_ignoreChildNodes && nodeType !== 8 && nodeType !== 10) {\n            for (const child of children) {\n              traverse(child, el);\n            }\n          }\n        }\n      }\n      return el;\n    };\n\n    for (const node of this.astTree) {\n      if (this.DOMApis.isNode(node) && node.tagName !== '!doctype') {\n        const el = traverse(node, parent);\n        el && elements.push(el);\n      }\n    }\n    return elements;\n  }\n\n  toResolveUrl(node: Node, type: string, baseUrl?: string) {\n    const src = node.attributes?.find(({ key }) => key === type);\n    if (src && src.value && baseUrl) {\n      src.value = transformUrl(baseUrl, src.value);\n    }\n  }\n\n  ignoreChildNodesCreation(node: Element) {\n    if (node) {\n      (node as any)._ignoreChildNodes = true;\n    }\n    return node;\n  }\n\n  findAllMetaNodes() {\n    return this.getNodesByTagName('meta').meta;\n  }\n\n  findAllLinkNodes() {\n    return this.getNodesByTagName('link').link;\n  }\n\n  findAllJsNodes() {\n    return this.getNodesByTagName('script').script;\n  }\n\n  findAttributeValue(node: Node, type: string) {\n    return node.attributes?.find(({ key }) => key === type)?.value || undefined;\n  }\n\n  cloneNode(node: Node) {\n    return deepMerge(node, {});\n  }\n\n  clone() {\n    // @ts-ignore\n    const cloned = new this.constructor();\n    cloned.url = this.url;\n    cloned.astTree = this.astTree;\n    cloned.pretreatmentStore = this.pretreatmentStore;\n    cloned.DOMApis = new DOMApis(this.DOMApis.document);\n    return cloned;\n  }\n}\n", "import { Node } from '@garfish/utils';\n\nexport class JavaScriptManager {\n  public async: boolean;\n  public mimeType: string;\n  public scriptCode: string;\n  public url?: string;\n\n  // Need to remove duplication, so use \"set\"\n  private depsStack = new Set();\n\n  constructor(scriptCode: string, url?: string) {\n    this.mimeType = '';\n    this.async = false;\n    this.url = url;\n    this.scriptCode = scriptCode;\n  }\n\n  isModule() {\n    return this.mimeType === 'module';\n  }\n\n  isInlineScript() {\n    return Boolean(!this.url);\n  }\n\n  setMimeType(mimeType: string) {\n    this.mimeType = mimeType || '';\n  }\n\n  setAsyncAttribute(val: boolean) {\n    this.async = Boolean(val);\n  }\n\n  setDep(node: Node) {\n    this.depsStack.add(node);\n  }\n\n  isSameOrigin(node: Node) {\n    return this.depsStack.has(node);\n  }\n\n  clone() {\n    // @ts-ignore\n    const cloned = new this.constructor();\n    cloned.url = this.url;\n    cloned.async = this.async;\n    cloned.mimeType = this.mimeType;\n    cloned.scriptCode = this.scriptCode;\n    cloned.depsStack = new Set(this.depsStack);\n    return cloned;\n  }\n}\n", "import { error, parseContentType } from '@garfish/utils';\nimport { Manager, Loader } from './index';\n\nexport function getRequest(customFetch: Loader['hooks']['lifecycle']['fetch']) {\n  return async function request(url: string, config: RequestInit) {\n    let result = await customFetch.emit(url, config || {});\n    if (!result || !(result instanceof Response)) {\n      result = await fetch(url, config || {});\n    }\n\n    // Response codes greater than \"400\" are regarded as errors\n    if (result.status >= 400) {\n      error(`\"${url}\" load failed with status \"${result.status}\"`);\n    }\n    const code = await result.text();\n    const type = result.headers.get('content-type') || '';\n    const size = Number(result.headers.get('content-size'));\n    const mimeType = parseContentType(type || '');\n\n    return {\n      code,\n      result,\n      mimeType,\n      type,\n      size: Number.isNaN(size) ? null : size,\n    };\n  };\n}\n\nexport function copyResult(result) {\n  if (result.resourceManager) {\n    result.resourceManager = (result.resourceManager as Manager).clone();\n  }\n  return result;\n}\n\n// Compatible with old api\nexport function mergeConfig(loader: Loader, url: string) {\n  const extra = loader.requestConfig;\n  const config = typeof extra === 'function' ? extra(url) : extra;\n  return { mode: 'cors', ...config } as RequestInit;\n}\n", "import type { Manager, CacheValue } from './index';\n\nexport const cachedDataSet = new WeakSet();\n\nexport enum FileTypes {\n  js = 'js',\n  css = 'css',\n  module = 'module', // remote module\n  template = 'template',\n}\n\nconst MAX_SIZE = 1024 * 1024 * 50;\nconst DEFAULT_POLL = Symbol('__defaultBufferPoll__');\nconst FILE_TYPES = [\n  FileTypes.js,\n  FileTypes.css,\n  FileTypes.module,\n  FileTypes.template,\n  DEFAULT_POLL,\n];\n\nexport class AppCacheContainer {\n  private maxSize: number;\n  private totalSize = 0;\n  private recorder = {};\n\n  constructor(maxSize = MAX_SIZE) {\n    this.maxSize = maxSize;\n    FILE_TYPES.forEach((key) => {\n      this.recorder[key] = 0;\n      this[key] = new Map<string, CacheValue<Manager>>();\n    });\n  }\n\n  private bufferPool(type: FileTypes | typeof DEFAULT_POLL) {\n    return this[type] as Map<string, CacheValue<Manager>>;\n  }\n\n  has(url: string) {\n    return FILE_TYPES.some((key) => this[key].has(url));\n  }\n\n  get(url: string) {\n    for (const key of FILE_TYPES) {\n      if (this[key].has(url)) {\n        return this[key].get(url);\n      }\n    }\n  }\n\n  set(url: string, data: CacheValue<Manager>, type: FileTypes) {\n    const curSize = cachedDataSet.has(data) ? 0 : data.size;\n    const totalSize = this.totalSize + curSize;\n\n    if (totalSize < this.maxSize) {\n      let bar = type;\n      let bufferPool = this.bufferPool(type);\n      if (!bufferPool) {\n        bar = DEFAULT_POLL as any;\n        bufferPool = this.bufferPool(DEFAULT_POLL);\n      }\n\n      bufferPool.set(url, data);\n      this.totalSize = totalSize;\n      this.recorder[bar] += curSize;\n      return true;\n    }\n    return false;\n  }\n\n  clear(type?: FileTypes) {\n    if (typeof type === 'string') {\n      const cacheBox = this.bufferPool(type);\n      if (cacheBox && cacheBox instanceof Map) {\n        const size = this.recorder[type];\n        this.totalSize -= size;\n        this.recorder[type] = 0;\n        cacheBox.clear();\n      }\n    } else {\n      FILE_TYPES.forEach((key) => {\n        this[key].clear();\n        this.recorder[key] = 0;\n      });\n      this.totalSize = 0;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}

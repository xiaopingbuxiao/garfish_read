{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/instance.ts", "../../src/customElement.ts"],
  "sourcesContent": ["export type { interfaces } from '@garfish/core';\nexport { default as Garfish } from '@garfish/core';\nexport { GarfishInstance as default } from './instance';\nexport { defineCustomElements } from './customElement';\n", "import Garfish from '@garfish/core';\nimport { GarfishRouter } from '@garfish/router';\nimport { GarfishBrowserVm } from '@garfish/browser-vm';\nimport { GarfishBrowserSnapshot } from '@garfish/browser-snapshot';\nimport { def, warn, hasOwn, inBrowser, __GARFISH_FLAG__ } from '@garfish/utils';\n\ndeclare global {\n  interface Window {\n    Garfish: Garfish;\n    __GARFISH__: boolean;\n  }\n}\n\n// Initialize the Garfish, currently existing environment to allow only one instance (export to is for test)\nfunction createContext(): Garfish {\n  let fresh = false;\n  // Existing garfish instance, direct return\n  if (inBrowser() && window['__GARFISH__'] && window['Garfish']) {\n    return window['Garfish'];\n  }\n\n  const GarfishInstance = new Garfish({\n    plugins: [GarfishRouter(), GarfishBrowserVm(), GarfishBrowserSnapshot()],\n  });\n\n  type globalValue = boolean | Garfish | Record<string, unknown>;\n  const set = (namespace: string, val: globalValue = GarfishInstance) => {\n    if (hasOwn(window, namespace)) {\n      if (!(window[namespace] && window[namespace].flag === __GARFISH_FLAG__)) {\n        const next = () => {\n          fresh = true;\n          if ((typeof process !== \"undefined\" && process.env && process.env.NODE_ENV ? (process.env.NODE_ENV !== \"production\") : false)) {\n            warn(`\"Window.${namespace}\" will be overwritten by \"garfish\".`);\n          }\n        };\n        const desc = Object.getOwnPropertyDescriptor(window, namespace);\n        if (desc) {\n          if (desc.configurable) {\n            def(window, namespace, val);\n            next();\n          } else if (desc.writable) {\n            window[namespace] = val;\n            next();\n          }\n        }\n      }\n    } else {\n      fresh = true;\n      def(window, namespace, val);\n    }\n  };\n\n  if (inBrowser()) {\n    // Global flag\n    set('Garfish');\n    def(window, '__GARFISH__', true);\n  }\n\n  if (fresh) {\n    if ((typeof process !== \"undefined\" && process.env && process.env.NODE_ENV ? (process.env.NODE_ENV !== \"production\") : false)) {\n      if ('1.12.0' !== window['Garfish'].version) {\n        warn(\n          'The \"garfish version\" used by the main and sub-applications is inconsistent.',\n        );\n      }\n    }\n  }\n  return GarfishInstance;\n}\n\nexport const GarfishInstance = createContext();\n", "import { interfaces } from '@garfish/core';\nimport { GarfishInstance } from './instance';\n\nexport interface CustomOptions {\n  loading: (loadingParams: { isLoading: boolean; error: Error }) => Element;\n  delay: number;\n  config?: interfaces.Config;\n}\n\nexport function generateCustomerElement(\n  htmlTag: string,\n  options: CustomOptions,\n) {\n  class MicroApp extends HTMLElement {\n    appInfo = {\n      name: '',\n      entry: '',\n      basename: '',\n    };\n    options: {\n      loading?: (loadingParams: {\n        isLoading: boolean;\n        error: Error;\n        pastDelay: boolean;\n      }) => Element;\n      delay: number;\n    } = {\n      delay: 200,\n    };\n    placeholder: Element;\n    state = this._observerAppState({\n      isLoading: false,\n      error: null,\n      promise: null,\n      loaded: null,\n      pastDelay: false,\n    });\n    _delay: ReturnType<typeof setTimeout>;\n\n    constructor() {\n      super();\n      this.options = options;\n    }\n\n    _observerAppState(state) {\n      return new Proxy(state, {\n        set: (target: any, p: string | symbol, value: any, receiver: any) => {\n          // Loading status content display in the loading process\n          // Error display error\n          const getPlaceHolderAndAppend = () => {\n            // Remove the existing placeholder content\n            if (this.placeholder && this.contains(this.placeholder)) {\n              this.removeChild(this.placeholder);\n            }\n            const placeholder =\n              this.options.loading &&\n              this.options.loading({\n                isLoading: this.state.isLoading,\n                error: this.state.error,\n                pastDelay: this.state.pastDelay,\n              });\n            placeholder && this.appendChild(placeholder);\n            return placeholder;\n          };\n\n          const res = Reflect.set(target, p, value, receiver);\n          // Loading began to open the loading placeholder\n          // Loading end closed loading placeholder\n          // Loading end placeholder closed if there is no mistake\n          if (p === 'error' && value) {\n            const placeholder = getPlaceHolderAndAppend();\n            if (placeholder) this.placeholder = placeholder;\n          } else if (p === 'pastDelay' && value === true) {\n            const placeholder = getPlaceHolderAndAppend();\n            if (placeholder) this.placeholder = placeholder;\n          } else if (p === 'isLoading' && value === true) {\n            const placeholder = getPlaceHolderAndAppend();\n            if (placeholder) this.placeholder = placeholder;\n          } else if (p === 'isLoading' && value === false) {\n            if (!this.state.error && this.contains(this.placeholder)) {\n              this.removeChild(this.placeholder);\n            }\n          }\n          return res;\n        },\n      });\n    }\n\n    _loadApp() {\n      // If you are loading stop continue to load\n      if (this.state.isLoading) return;\n      this.state.isLoading = true;\n\n      // Avoid loading flash back\n      if (typeof this.options.delay === 'number') {\n        if (this.options.delay === 0) {\n          this.state.pastDelay = true;\n        } else {\n          this._delay = setTimeout(() => {\n            this.state.pastDelay = true;\n          }, this.options.delay);\n        }\n      }\n\n      this.state.promise = GarfishInstance.loadApp(this.appInfo.name, {\n        entry: this.appInfo.entry,\n        domGetter: () => this,\n        basename: this.appInfo.basename,\n        sandbox: {\n          snapshot: false,\n          strictIsolation: this.hasAttribute('shadow') || false,\n        },\n      });\n    }\n\n    _clearTimeouts() {\n      clearTimeout(this._delay);\n    }\n\n    async connectedCallback() {\n      this.appInfo = {\n        name: this.getAttribute('name') || '',\n        entry: this.getAttribute('entry') || '',\n        basename: this.getAttribute('basename') || '/',\n      };\n      try {\n        this._loadApp();\n        this.state.loaded = await this.state.promise;\n        if (this.state.loaded.mounted) {\n          this.state.loaded.show();\n        } else {\n          await this.state.loaded.mount();\n        }\n      } catch (error) {\n        this.state.error = error;\n      } finally {\n        this.state.isLoading = false;\n      }\n    }\n\n    disconnectedCallback() {\n      this._clearTimeouts();\n      if (this.state.loaded) {\n        this.state.loaded.hide();\n      }\n    }\n\n    async adoptedCallback() {\n      // console.log('Custom square element moved to new page.');\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n      console.log(\n        'Custom square element attributes changed.',\n        name,\n        oldValue,\n        newValue,\n      );\n    }\n  }\n\n  // Define the new element\n  if (!customElements.get(htmlTag)) {\n    GarfishInstance.run(options.config || {});\n    customElements.define(htmlTag, MicroApp);\n  }\n}\n\nfunction createLoadableWebComponent(htmlTag: string, options: CustomOptions) {\n  if (typeof htmlTag !== 'string') {\n    throw new Error('garfish requires a `htmlTag` name');\n  }\n\n  if (!options.loading) {\n    throw new Error('garfish requires a `loading` component');\n  }\n\n  const opts = Object.assign(\n    {\n      loading: false,\n      delay: 200,\n      timeout: null,\n    },\n    options,\n  );\n  return generateCustomerElement(htmlTag, opts);\n}\n\nexport function defineCustomElements(htmlTag: string, options: CustomOptions) {\n  return createLoadableWebComponent(htmlTag, options);\n}\n"],
  "mappings": "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",
  "names": []
}

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/vueBridge.ts
import * as vue from "vue";
var defaultOpts = {
  VueRouter: null,
  rootComponent: null,
  loadRootComponent: null,
  appOptions: null,
  handleInstance: null,
  el: null,
  canUpdate: true
};
function vueBridge(userOpts) {
  if (typeof userOpts !== "object") {
    throw new Error("garfish-vue-bridge: requires a configuration object");
  }
  const opts = __spreadValues(__spreadValues({}, defaultOpts), userOpts);
  if (opts.appOptions && typeof opts.appOptions !== "function" && opts.appOptions["el"] !== void 0 && typeof opts.appOptions["el"] !== "string" && !(opts.appOptions.el instanceof HTMLElement)) {
    throw Error(`garfish-vue-bridge: appOptions.el must be a string CSS selector, an HTMLElement, or not provided at all. Was given ${typeof opts.appOptions.el}`);
  }
  opts.Vue = opts.Vue || vue.default;
  const mountedInstances = {};
  const providerLifeCycle = {
    render: (props) => mount.call(this, opts, mountedInstances, props),
    destroy: (props) => unmount.call(this, opts, mountedInstances, props),
    update: (props) => opts.canUpdate && update.call(this, opts, mountedInstances, props)
  };
  const provider = async function(appInfo, props) {
    await bootstrap.call(this, opts, appInfo, props);
    return providerLifeCycle;
  };
  if (window.__GARFISH__ && typeof __GARFISH_EXPORTS__ === "object" && __GARFISH_EXPORTS__) {
    __GARFISH_EXPORTS__.provider = provider;
  }
  return provider;
}
function bootstrap(opts, appInfo, props) {
  if (opts.loadRootComponent) {
    return opts.loadRootComponent(__spreadProps(__spreadValues({}, appInfo), {
      props
    })).then((root) => opts.rootComponent = root);
  } else {
    return Promise.resolve();
  }
}
function resolveAppOptions(opts, props) {
  if (typeof opts.appOptions === "function") {
    return opts.appOptions(props);
  }
  return __spreadValues({}, opts.appOptions);
}
function mount(opts, mountedInstances, props) {
  const instance = {
    domEl: null,
    vueInstance: null,
    root: null
  };
  const appOptions = resolveAppOptions(opts, props);
  if (!(props.dom instanceof HTMLElement)) {
    throw Error(`garfish-vue-bridge: Garfish runtime provides no dom attributes to mount\uFF0C ${props.dom}`);
  }
  if (appOptions.el) {
    appOptions.el = props.dom.querySelector(appOptions.el);
    if (!appOptions.el) {
      throw Error(`If appOptions.el is provided to garfish, the dom element must exist in the dom. Was provided as ${appOptions.el}.If use js as sub application entry resource please don't provider el options`);
    }
  } else {
    appOptions.el = props.dom;
  }
  instance.domEl = appOptions.el;
  if (!appOptions.render && !appOptions.template && opts.rootComponent) {
    appOptions.render = (h) => h(opts.rootComponent);
  }
  if (!appOptions.data) {
    appOptions.data = {};
  }
  appOptions.data = () => __spreadValues(__spreadValues({}, appOptions.data), props);
  delete appOptions.el;
  if (opts && opts.Vue) {
    instance.vueInstance = new opts.Vue(appOptions);
    instance.vueInstance.$mount();
    instance.domEl.appendChild(instance.vueInstance.$el);
    if (instance.vueInstance.bind) {
      instance.vueInstance = instance.vueInstance.bind(instance.vueInstance);
    }
    if (opts.handleInstance) {
      opts.handleInstance(instance.vueInstance, props);
      mountedInstances[props.appName] = instance;
      return instance.vueInstance;
    }
  }
  mountedInstances[props.appName] = instance;
  return instance.vueInstance;
}
function update(opts, mountedInstances, props) {
  const instance = mountedInstances[props.appName];
  const appOptions = resolveAppOptions(opts, props);
  const data = __spreadValues(__spreadValues({}, appOptions.data || {}), props);
  const root = instance.root || instance.vueInstance;
  for (const prop in data) {
    root[prop] = data[prop];
  }
}
function unmount(opts, mountedInstances, props) {
  const instance = mountedInstances[props.appName];
  instance.vueInstance.$destroy();
  instance.vueInstance.$el.innerHTML = "";
  delete instance.vueInstance;
  if (instance.domEl) {
    instance.domEl.innerHTML = "";
    delete instance.domEl;
  }
}
export {
  vueBridge
};
//# sourceMappingURL=data:application/json;base64,
